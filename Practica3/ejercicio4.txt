4. En una mesa de exámenes hay 3 profesores que les deben tomar un examen oral a 30 alumnos
de acuerdo al orden de llegada. Cada examen es tomado por un único profesor. Cuando un
alumno llega, espera a que alguno de los profesores (cualquiera) lo llame y se dirige al
escritorio correspondiente a ese profesor, donde le tomará el examen; al terminar el
profesor le da la nota y el alumno se retira. Cuando un profesor está libre llama al siguiente
alumno. Nota: todos los procesos deben terminar su ejecución.




process alumno[id: 1..30]{
    int nota;
    examen.rendir(id, nota);
}


process profesor[id: 1..3]{
    boolean seguirTomando;
    while(seguirTomando){
        examen.tomar(seguirTomando);
    }
}


monitor examen{
    cond esperarParaRendir[1..30];
    cond esperarLaNota[1..30];
    cond termine[1..30];
    cola c;
    int esperando;
    cond llegue; 
    int notas[1..30];
    int cantidad = 0;


    Procedure rendir(id: in int, nota: out int){
        encolar(c, id);
        signal(llegue);
        wait(esperarParaRendir[id]);
        //rindo el examen lo podría guardar en examen[id]
        signal(termine[id]);
        wait(esperarLaNota[id]);
        notas[id] = nota;
    }

    Procedure tomar(seguirTomando: out boolean){
        int auxId;
        while(empty(c) or cantidad == 30){
            wait(llegue)
        }
        if(cantidad == 30){
            seguirTomando = false;
            signal_all(llegue);
        }else{
            seguirTomando = true;
            desencolar(c, auxId);
            signal(esperarParaRendir[auxId]);
            wait(termine[auxId]);
            //corrijo el parcial (que podría estar en examen[auxId]) y genero nota
            notas[auxId] = nota
            cantidad++;
            signal(esperarLaNota[auxId]);
        }
    }
}