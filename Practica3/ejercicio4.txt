4. En una mesa de exámenes hay 3 profesores que les deben tomar un examen oral a 30 alumnos
de acuerdo al orden de llegada. Cada examen es tomado por un único profesor. Cuando un
alumno llega, espera a que alguno de los profesores (cualquiera) lo llame y se dirige al
escritorio correspondiente a ese profesor, donde le tomará el examen; al terminar el
profesor le da la nota y el alumno se retira. Cuando un profesor está libre llama al siguiente
alumno. Nota: todos los procesos deben terminar su ejecución.


process alumno[id:1..30]{
    int idProfe;
    int nota;
    seleccionProfe.llegue(idProfe);
    //hago examen
    escritorio[idProfe].esperarLaNota(examen, nota);
}

process profesor[id: 1..3]{
    bool terminaron;
    int nota;
    seleccionProfe.profeLibre(id, terminaron);
    while(!terminaron){
        escritorio[id].corregirExamen();
        seleccionProfe.profeLibre(id, terminaron);
    }
}

monitor seleccionProfe{
    int profesLibres = 0;
    int esperando = 0;
    cond cola;
    cola profes;
    int corregidos = 0;
    cond esperandoAlumno;

    llegue(int out idProfe){
        if(profeLibres == 0){
            esperando++;
            wait(cola);
        }else{
            profesLibres--;
        }        
        pop(profes, idProfe);
        signal(esperandoAlumno);
    }

    profeLibre(int in id, bool out terminaron){
        terminaron = false;
        if(corregidos < 30){
            if(esperando > 0){
                signal(cola);
                esperando--;
            }else{
                profeLibres++;
            }
            push(profes, id);
            wait(esperandoAlumno);
            if(corregidos == 29){
                signal_all(esperandoAlumno);
                corregidos++;
            }else if(corregidos == 30){
                terminaron = true;
            }
        }else{
            terminaron = true;
        }
    }

monitor escritorio[1..3]{
    bool entregue;
    cola esperandoNota;
    cola esperandoEntrega;
    examen examenEntregado;
    int notaExamen;

    esperarLaNota(examen in e, int out nota){
        examenEntregado = e;
        entregue = true;
        signal(esperandoEntrega);
        wait(esperandoNota);
        nota = notaExamen;
    }

    corregirExamen(){
        int nota;
        if(!entregue) wait(esperandoEntrega);
        entregue = false;
        e = examenEntregado;
        //Corrijo e generando una nota en nota
        notaExamen = nota;
        signal(esperandoNota);
    }

}



}
