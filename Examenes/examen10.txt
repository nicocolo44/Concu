En una playa hay 5 personas que deben juntar 15 monedas cada una y obtener el
TOTAL de dinero juntado entre todos (la suma del valor de las 75 monedas que
pueden ser de 1, 2 o 5 pesos). Al terminar todos los procesos deben guardarse en
una variable local el TOTAL. Nota: maximizar la concurrencia. Suponga que existe
una función Moneda() llamada por las personas que simula encontrar UNA moneda
y retorna el valor de la misma. Cada persona trabaja sobre una zona diferente de la
playa.


cantidadTotMonedas = 0;
cantidadTerminados = 0;

process persona[id:1..5]{
    int cantP, TOTAL;
    for(i:1..15){
        cantP+= Moneda();
    }
    <cantidadTotMonedas+=cantP>
    <cantidadTerminados++>
    <Await cantidadTerminados == 5>
    TOTAL = cantidadTotMonedas;
}


Se debe calcular el valor promedio de un vector de 1000 números por medio de 10
procesos. Al finalizar todos los procesos deben guardar en una variable local el
resultado final. Nota: maximizar la concurrencia

cant sumaTot = 0;
cant terminados= 0;
vector v[0..999]

process sumador[id:0..9]{
    int cantP=0;
    for(i:0..99){
        cantP += v[id*100 + i]
    }
    <sumaTot+=cantP>
    <terminados++>
    <await (terminados == 10)>
    prom = sumaTot / 1000;
}

Simular el funcionamiento de un Entrenamiento de Básquet donde hay 20 jugadores
y 2 canchas donde entrenar. Los jugadores se van distribuyendo entre las canchas
en forma cíclica de acuerdo al orden de llegada (el primero va a la cancha 1, el
segundo a la 2, el tercer a la 1, y así sucesivamente). Cuando un jugador llega
determina la cancha a la cual debe ir y se dirige a ella a esperar a que lleguen los 10
de esa cancha. Cuando todos los jugadores de una cancha han llegado, juegan un
partido de 40 minutos y se retiran. Nota: maximizar la concurrencia.


process jugador[id:1..20]{
    m.darCancha(cancha);
    m1[cancha].jugar();
}

process cancha[id:1..2]{
    m1[id].esperarJugadores();
    delay(40min);
    m1[id].terminoPartido();
}

monitor m{
    int cant=0;
    procedure darCancha(cancha: int out){
        cancha = cant mod 2 + 1;
        cant++;
    }
}

monitor m1[id:1..2]{
    cond barrera;
    cond canchaDormida;
    bool llegaronTodos = false;
    int cant = 0;

    procedure jugar(){
        cant++;
        if(cant==10){
            signal(canchaDormida);
            llegaronTodos = true;
        }
        wait(barrera);
    }

    procedure esperarJugadores(){
        if(!llegaronTodos){
            wait(canchaDormida);
        }
    }

    procedure terminoPartido(){
        signal_all(barrera);
    }
}