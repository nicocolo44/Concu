1. Resolver con PMA (Pasaje de Mensajes ASINCRÓNICOS) el siguiente problema. En un negocio hay 3
empleados que atienden de acuerdo al orden de llegada a N personas que van a pedir un presupuesto. Cuando el
cliente sabe que empleado lo va a atender le entrega el listado de productos que necesita, y luego el empleado le
entrega el presupuesto del mismo. Cuando un empleado está libre atiende a la primera persona que esté esperando
para ser atendida. Nota: maximizar la concurrencia.


process persona[id: 1..N]{
    int idE;
    text listado;
    send llegue(id);
    receive idEmpleado[id](idE);
    send mandarLista[idE](listado);
    receive entrega[id](presupuesto);
}


process empleado[id: 1..3]{
    while(true){
        receive llegue(auxId);
        send idEmpleado[auxId](id);
        receive mandarLista[id](listado);
        send entrega[auxId](presupuesto);
    }
}


2. Resolver con PMS (Pasaje de Mensajes SINCRÓNICOS) el siguiente problema. En un examen hay un docente
que toma el final a 20 alumnos (de a uno a la vez). El docente llama a los alumnos en orden según su ID , le toma el
examen y al terminar le indica su nota.

process alumno[id: 1..20]{
    profesor!llegue();
    profesor?empezasteARendir(); //No es necesario
    profesor?terminaste(nota);
}

process docente{
    for(i:1..20){
        alumno[i]?llegue();
        alumno[i]!empezasteARendir();
        //Le tomo
        alumno[i]!terminaste(nota);
    }
}



3. Resolver con ADA el siguiente problema. En un cumpleaños de 7 años contratan a un especialista para que se
encargue del entretenimiento. El especialista hace una competencia entre los N chicos donde le entrega a cada uno
una lista de 10 elementos a buscar (diferentes elementos en cada lista). Cada chico busca los elementos que le tocaron
en la lista, y al terminar le entrega todo al especialista para que le dé un puntaje (suponga que existe una función
DarPuntaje llamada por el especialista para hacer este cálculo). Cuando todos han terminado el especialista le indica a
todos los chicos el id de quien gano (obtuvo más puntaje). Nota: maximizar la concurrencia.


procedure ejer3 is


task type niñito is 
    entry dameId(id: IN Int);
end niñito;

task animador is
    entry darLista(lista: Out text);
    entry terminoNiñito(lista: in text, id: in text, puntaje: out int);
    entry ganador(id: out int);
end animador

niñitos: Array(1..N) of niñito;

task body niñito is
    id: int;
    lista: text;
    ganadorId: int;
    puntaje: int;
begin
    accept dameId(idN: in int) do
        id := idN;
    end dameId
    animador.darLista(lista);
    //juego
    animador.terminoNiñito(lista, id, puntaje);
    animador.ganador(ganadorId);
end niñito;

task body animador
    maxId: int;
    maxPuntaje: int;
    lista: text;
    puntajeA: int;
begin
    for(1..2*N) loop 
        select
            accept darLista(lista: out text) do
                lista := listaAleatoria();
            end darLista
        or
            when(darLista'count = 0) => accept terminoNiñito(lista: in text, id: in text, puntaje: out int) do
                puntajeA = darPuntaje(lista);
                if(maxPuntaje < puntajeA) then
                    maxPuntaje = puntajeA;
                    maxId = id;
                end if
                puntaje = puntajeA;
            end terminoNiñito
        end select
    end loop
    for(1..N) loop 
        accept ganador(ganador: out int) do
              ganador := maxId;
        end ganador
    end loop
end animador

begin
    for(i in 1..N) loop
        niñitos[i].darId(i);
    end loop
end ejer3;